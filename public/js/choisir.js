/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 3);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./resources/js/choisir.js":
/*!*********************************!*\
  !*** ./resources/js/choisir.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// Intervient dans la page choisir (ExtranetDemandeController@choisir)\n// Quand on clique sur l'icone de l'espece, cela affiche la liste des questions que l'on peut se poser  sur le parasitisme de cette espece\n// via une requete ajax qui interroge la méthode ExtranetDemandeController@observationSelonEspece\n// On affiche cette liste dans la vue methodeChoixAnalyse\n// Cela permet ensuite de cliquer sur les différentes observations et à chaque fois, ça fait uner requete ajax (ExtranetDemandeController@analyseSelonObservations)\n// Cette requete retourne un json que l'on affiche dans la vue options.blade\n// Initialise la liste des observations\nvar tableau_observations = [];\nvar selection = []; // On récupére l'url actuelle\n\nvar url_actuelle = window.location.protocol + \"//\" + window.location.host + window.location.pathname; // récupère l'adresse de la page actuelle\n// On récupère le href original du bouton de téléchargment de formulaire pour pouvoir le remettre à zéro quand on change d'espèce\n\nvar href_initial = $(\"#bouton_pdf\").attr('href'); // On récupère l'adresse des icones ainsi que le contenu du tooltip pour la remise à zéro en changement d'espcèce\n\nvar src_img_espece = $('#src_img_espece').attr('lien'); // ##################### PREMIERE ETAPE ##########################################################################\n// Affichage des analyses proposées après qu'on ait cliqué sur l'icone de l'espece (dans choisir.blade.php)\n\n$('.espece').on('click', function () {\n  // On efface les fenêtre ages\n  $(\"#age\").empty(); // On vide le champs input ages\n\n  $(\"#input_age\").val(''); // On réinitialise le bouton de téléchargement de fichier\n\n  $('#bouton_pdf').attr('href', href_initial); // On modifie l'affichage des logos espece\n\n  $(\".espece\").css('filter', 'opacity(20%)');\n  $(this).css('filter', 'blur(0px)'); // On vide la colonne d'options\n\n  videOptionsAnaaactes(); // On efface les intertitres correspondant aux categories\n\n  $('.categorie').hide(); // On vide la liste d'observation\n\n  $('.liste_observations').empty();\n  selection = []; // On récupère l'id de l'espece sur laquelle on a cliqué\n\n  var espece_id = $(this).attr('id').split('_')[1];\n  var espece_nom = $(this).attr('espece'); // On stocke cette valeur dans un input hidden pour la suite\n\n  $(\"#input_espece\").val(espece_id); // On prépare une requete ajax sur les ages\n\n  var url = url_actuelle.replace('analyses/choisir', 'api/ages/' + espece_id); // Requete ajax\n\n  $.get({\n    url: url\n  }).done(function (data) {\n    var ages = JSON.parse(data); // Si le json renvoyé par la requete 'n'est pas un tableau vide c'est qu'il y a différentes classes d'age\n\n    if (ages.length > 0) {\n      // On ajoute le titre: Choisir un age\n      var ajout = '<div class=\"my-3 p-3 alert-secondary shadow\"><p class=\"lead\">' + $(\"#age\").attr('titre') + '</p>'; // On passe en revue le tableau\n\n      $.each(ages, function (key, lignes) {\n        // Et à chaque fois on ajoute une image correspondant à un age de l'espece sélectionnée\n        ajout += '<img id=\"ages_' + lignes.id + '\" class=\"age img-zoom mr-3\" src=\"' + src_img_espece + '/' + lignes.icone.nom + '\" alt=\"ages\" data-toggle=\"tooltip\" title=\"' + lignes.nom + '\">';\n      });\n      ajout += '</div>'; // On fait l'ajout\n\n      $('#age').append(ajout); // Puis l'utilisateur clique sur une de des icones d'age\n\n      $(\".age\").on('click', function () {\n        var age_id = $(this).attr('id').split('_')[1]; // On passe l'info à l'input hidden du formulaire\n\n        $(\"#input_age\").val(age_id); // On change l'icone du bovin pour s'adapter au choix\n\n        $('#img_' + espece_id).attr('src', $(this).attr('src')); // On ajoute le nom de l'age à l'icone d'origine\n\n        $('#img_' + espece_id).attr('title', $(this).attr('title')); // On vide le titre de la page pour le remplacer par le nom de l'age\n\n        $(\"#titre\").empty().append($(this).attr('title')); // On efface la fenêtre de choix\n\n        $(\"#age\").empty(); // on appelle la fonction qui fait la requete ajax permettant d'afficher les options\n\n        listeObservations('ages', age_id);\n      }); // S'il n'y a pas de classe d'age dans l'espece sélectionnée\n    } else {\n      // On vide le titre de la page pour le remplacer par le nom de l'age\n      $(\"#titre\").empty().append(espece_nom); // on appelle directement la fonction qui fait la requete ajax\n\n      listeObservations('especes', espece_id);\n    }\n  }); // On récupère l'abbreviation de l'espece pour pouvoir modifier le href du bouton de téléchargement du formulaire\n\n  var espece_abbreviation = $(this).attr('name');\n  var href = href_initial.replace('espece', espece_abbreviation);\n  $('#bouton_pdf').attr('href', href);\n  var observation_id = ''; // On réinitialise le tableau de observations sélectionnées\n\n  tableau_observations = []; // On remet à zéro le numéro d'observation qui serait sélectionné\n\n  $('.liste_observations').each(function (key, value) {\n    selection.push(null);\n  });\n}); // Fonction qui requete ajax avec l'espece_id (ExtranetDemandeController@observationSelonEspece)\n// Et affiche le résultat sous la forme d'une liste d'observations avec trois propriétés quand on clique:\n// 1) ça met l'observation en couleur\n// 2) cela expand l'affichage pour montrer l'explication et les autres origines\n// 3) ça complete la liste des observations cliquées et ça fait une requete ajax pour afficher la liste des analyses\n\nfunction listeObservations(type, id) {\n  // affiche le soustitre et on lui donne l'attribut espece avec l'espece_id comme valeur pour la requete ajax suivante\n  $(\"#titre_observations\").fadeIn(); // On affiche le tuto\n\n  $(\"#choisirTuto\").fadeIn(); // On modifie l'url pour pouvoir faire la requete\n\n  var url = url_actuelle.replace('analyses/choisir', 'api/observations/' + type + '/' + id);\n  $.get({\n    url: url\n  }).done(function (datas) {\n    if (datas != null) {\n      lignes = JSON.parse(datas);\n      $('.categorie').fadeIn();\n      $.each(lignes, function (key, ligne) {\n        // la creation de la variable autre est destinée à ne rien afficher quand la valeur de ligne.autres est null\n        var autres = ligne.autres == null ? '' : '<p class=\"ml-3 mb-0 p-1 pl-2 bordure-epaisse\"><i>Autres causes&nbsp;: </i>' + ligne.autres + '</p>'; // On ajoute la liste des observations\n\n        $(\"#categorie_\" + ligne.categorie_id).append('<div id=\"card_' + ligne.id + '\" class=\"card borderless\" categorie=\"' + ligne.categorie_id + '\">' + '<div id=\"observation_' + ligne.id + '\" class=\"card-header observation list-group-item list-group-item-action disabled pointeur\" selection=\"non\" >' + ligne.intitule + '</div>' + '<div id=\"explication_' + ligne.id + '\" class=\"collapse bg-bleu-tres-clair\">' + '<div class=\"card-body small\">' + '<p class=\"ml-3 mb-0 p-1 pl-2 bordure-epaisse\">' + ligne.explication + '</p>' + autres + '</div>' + '</div>' + '</div>');\n      });\n    }\n\n    ;\n  }).fail(function (datas) {\n    console.log('ERREUR: ' + datas);\n  });\n} // ################ DEUXIEME ETAPE ###########################################################\n// Quand on clique sur les observations\n\n\n$(\".liste_observations\").on('click', \".card\", function () {\n  // On récupère l'id de la card qui englobe observation et explication cliquée\n  var id = $(this).attr('id').split('_')[1];\n  var observation_id = '#observation_' + id;\n  var explication_id = '#explication_' + id;\n  var estSelection = $(observation_id).attr('selection'); // On récupère la catégorie\n\n  var categorie_id = $(this).parent().attr('id');\n  var id_categorie = categorie_id.split('_')[1]; // SUR LA COLONNE OBSERVATIONS:\n\n  if (estSelection == \"oui\") {\n    inactiveObservation(id); // On supprime cette valeur dui tableau selection\n\n    selection[id_categorie - 1] = null;\n  } else if (estSelection == \"non\") {\n    // On passe l'attribut selection à true\n    // Si une observation de cette catégorie est présente dans le tableau selection (cad a été sélectionnée avant)\n    if (selection[id_categorie - 1] != null) {\n      // Le id_categorie-1 est du au fait que l'array selection indice à 0 tandis que les bdd commencent à 1\n      var id_observation_active = selection[id_categorie - 1]; // On inactive l'observation (fermer le collapse, enlever la couleur)\n\n      inactiveObservation(id_observation_active);\n    } // Puis on inscrit la nouvelle obbservation cliquée dans le tableau selection\n\n\n    selection[id_categorie - 1] = id; // Le \"-1\" est dû au fait que les id des catégories commencent à 1 tandis que l'index du tableau à 0\n\n    activeObservation(id);\n  } // ON EFFACE TOUTE LA COLONNE OPTIONS:\n\n\n  videOptionsAnaaactes(); // On stocke la sélection dans les input pour la transmission ajax\n\n  $.each(selection, function (key, value) {\n    var indice = key + 1;\n    $(\"#input_\" + indice).val(value);\n  }); // On appelle la fonction listeOptions qui fait une requete post du formulaire caché (ExtranetDemandeController@optionsSelonObservations)\n\n  listeOptions(); // Et on remonte le scroll juste sous la ligne des especes\n\n  window.scrollTo(200, 250);\n}); // Fonction qui passe en display:block les options et les analyses sélectionnées\n\nfunction listeOptions() {\n  var url_actuelle = window.location.protocol + \"//\" + window.location.host + window.location.pathname; // récupère l'adresse de la page actuelle\n  // On modifie l'url pour pouvoir faire la requete\n\n  var url = url_actuelle.replace('analyses/choisir', 'api/options');\n  $(\"#choisirTuto\").hide();\n  console.log(url);\n  $.post({\n    url: url,\n    data: $('form').serialize(),\n    // on passe le formulaire caché\n    datatype: 'json'\n  }).done(function (datas) {\n    if (datas != null) {\n      // Si des données sont revenues (ce qui doit être systématiquement le cas)\n      var options = JSON.parse(datas).options; // On récupère le tableau options (2 options max)\n\n      var anaactes = JSON.parse(datas).anaactes; // on révupère le tableau anaactes (2 anaactes max)\n\n      if (nombreSelections(selection) > 0) {\n        // S'il y a au moins une sélection\n        if (options.length == 0) {\n          // Mais que le tableau option est vide, on affiche un message qu'il n'y a pas d'analyse\n          $('#aucune_option').show();\n        } else {\n          // Mais si le tableau option n'est pas vide, on affiche les options et anaactes correpondants\n          $.each(options, function (key, value) {\n            // Affichage des options\n            $('#' + value + '.option').fadeIn();\n          });\n\n          if (anaactes.length == 1) {\n            // Affichage d'un titre d'analyses différent s'il y en a une ou deux\n            $('#une').fadeIn();\n          } else {\n            $('#deux').fadeIn();\n          }\n\n          $.each(anaactes, function (key, value) {\n            // Affichage des analyses\n            $('#anaacte_' + value).fadeIn();\n          });\n          $('#boutons').fadeIn(1000);\n        }\n\n        $('#penser_veto').fadeIn(3000); // Et le véto\n\n        if ($(\"#input_espece\").val() == 5) {\n          $('#autres_analyses').fadeIn(2000);\n        }\n      } else {\n        // Si il n'y aucune observation séléctionnée, on efface tout\n        videOptionsAnaaactes();\n      }\n    }\n  }).fail(function (data) {\n    console.log(data);\n  });\n}\n\nfunction videOptionsAnaaactes() {\n  // On masque le panneau veto\n  $(\"#penser_veto\").hide();\n  $(\"#autres_analyses\").hide();\n  $('#boutons').hide(); // On masque la liste d'options\n\n  $('.option').hide();\n  $('.anaacte').hide(); // On masque le titre des analyses proposées\n\n  $(\".titre_analyses\").hide(); // On vide le 0 option\n\n  $('#aucune_option').hide();\n}\n\nfunction inactiveObservation(id) {\n  $(\"#observation_\" + id).attr('selection', 'non');\n  $(\"#observation_\" + id).toggleClass('active').toggleClass('disabled');\n  $(\"#explication_\" + id).removeClass('show');\n}\n\nfunction activeObservation(id) {\n  $(\"#observation_\" + id).attr('selection', 'oui');\n  $(\"#observation_\" + id).toggleClass('active').toggleClass('disabled');\n  $(\"#explication_\" + id).addClass('show');\n}\n\nfunction nombreSelections(selection) {\n  var longueur_selection = 0;\n  selection.forEach(function (value) {\n    longueur_selection += value == null ? 0 : 1;\n  });\n  return longueur_selection;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/choisir.js\n");

/***/ }),

/***/ 3:
/*!***************************************!*\
  !*** multi ./resources/js/choisir.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! /home/michel/www/parasitlab/resources/js/choisir.js */"./resources/js/choisir.js");


/***/ })

/******/ });